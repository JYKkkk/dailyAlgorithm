import java.util.*;
import java.io.*;

class Solution {
    
    static boolean[] visited;
    static int[][] graph;   // 인접행렬
    
    public int solution(int n, int[][] wires) {
        int answer = n;
        graph = new int[n+1][n+1];
        
        for(int i=0; i<wires.length; i++) {
            graph[wires[i][0]][wires[i][1]] = 1;
            graph[wires[i][1]][wires[i][0]] = 1;
        }
        
        for(int i=0; i<wires.length; i++) {
            int u = wires[i][0];
            int v = wires[i][1];
            
            // 선을 하나 끊음
            graph[u][v] = 0;
            graph[v][u] = 0;
            
            // bfs
            answer = Math.min(answer, bfs(n, u));
            
            // 선 다시 복구
            graph[u][v] = 1;
            graph[v][u] = 1;
        }      
        return answer;
    }
    
    public int bfs(int n, int u) {
        visited = new boolean[n+1];
        int cnt = 1;
        
        Queue<Integer> q = new LinkedList<>();
        q.offer(u);
        
        while(!q.isEmpty()) {
            int cur = q.poll();
            visited[cur] = true;
            
            for(int i=1; i<=n; i++) {
                if(!visited[i] && graph[cur][i]==1) {
                    q.offer(i);
                    cnt++;
                }
            }
        }
        return (int)Math.abs(n-2*cnt);
    }
}
